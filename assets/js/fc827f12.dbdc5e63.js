"use strict";(self.webpackChunkwaku_guide=self.webpackChunkwaku_guide||[]).push([[973],{3905:(e,t,o)=>{o.d(t,{Zo:()=>l,kt:()=>f});var n=o(67294);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function i(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function a(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?i(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):i(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function s(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)o=i[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)o=i[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var c=n.createContext({}),p=function(e){var t=n.useContext(c),o=t;return e&&(o="function"==typeof e?e(t):a(a({},t),e)),o},l=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var o=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(o),d=r,f=u["".concat(c,".").concat(d)]||u[d]||m[d]||i;return o?n.createElement(f,a(a({ref:t},l),{},{components:o})):n.createElement(f,a({ref:t},l))}));function f(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=o.length,a=new Array(i);a[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:r,a[1]=s;for(var p=2;p<i;p++)a[p]=o[p];return n.createElement.apply(null,a)}return n.createElement.apply(null,o)}d.displayName="MDXCreateElement"},74844:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>u,contentTitle:()=>p,default:()=>v,frontMatter:()=>c,metadata:()=>l,toc:()=>m});var n=o(87462),r=(o(67294),o(3905));const i={toc:[]},a="wrapper";function s(e){let{components:t,...o}=e;return(0,r.kt)(a,(0,n.Z)({},i,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("mermaid",{value:"sequenceDiagram\n\tparticipant A as A relay\n\tparticipant B as B relay(pubtopic1)\n\tparticipant C as C relay(pubtopic1)\n\tparticipant D as D relay(pubtopic1), store(pubtopic1), filter\n\tparticipant E as E relay, store\n\tparticipant F as F filter\n\n\tA ->> A: msg1=WakuMessage(contentTopic1, data) (1)\n\tF ->> D: FilterRequest(pubtopic1, contentTopic1) (2)\n\tD ->> D: Subscribe F to filter (2)\n\tA ->> B: Publish msg1 on pubtopic1 (3)\n\tB ->> D: relay msg1 on pubtopic1 (3)\n\tD ->> D: store: saves msg1 (4)\n\tD ->> C: relay msg1 on pubtopic1 (4)\n\tD ->> F: MessagePush(msg1) (5)\n\tE ->> E: E comes online (6)\n\tE ->> D: HistoryQuery(pubtopic1, contentTopic1) (6)\n\tD ->> E: HistoryResponse(msg1, ...) (6)"}),(0,r.kt)("p",null,"The Pub/Sub topic ",(0,r.kt)("inlineCode",{parentName:"p"},"pubtopic1")," serves as a means of routing messages (the network employs a default Pub/Sub topic) and indicates that it is subscribed to messages on that topic for a relay. Node D serves as a ",(0,r.kt)("inlineCode",{parentName:"p"},"Store")," and is responsible for persisting messages."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Node A creates a WakuMessage ",(0,r.kt)("inlineCode",{parentName:"li"},"msg1")," with ",(0,r.kt)("a",{parentName:"li",href:"/overview/concepts/content-topics"},"Content Topic")," ",(0,r.kt)("inlineCode",{parentName:"li"},"contentTopic1"),"."),(0,r.kt)("li",{parentName:"ol"},"Node F requests to get messages filtered by Pub/Sub topic ",(0,r.kt)("inlineCode",{parentName:"li"},"pubtopic1")," and Content Topic ",(0,r.kt)("inlineCode",{parentName:"li"},"contentTopic1"),". Node D subscribes F to this filter and will forward messages that match that filter in the future."),(0,r.kt)("li",{parentName:"ol"},"Node A publishes ",(0,r.kt)("inlineCode",{parentName:"li"},"msg1")," on ",(0,r.kt)("inlineCode",{parentName:"li"},"pubtopic1"),". The message is sent from Node A to Node B and then forwarded to Node D."),(0,r.kt)("li",{parentName:"ol"},"Node D, upon receiving ",(0,r.kt)("inlineCode",{parentName:"li"},"msg1"),", stores the message for future retrieval by other nodes and forwards it to Node C."),(0,r.kt)("li",{parentName:"ol"},"Node D also pushes ",(0,r.kt)("inlineCode",{parentName:"li"},"msg1")," to Node F, informing it about the arrival of a new message."),(0,r.kt)("li",{parentName:"ol"},"At a later time, Node E comes online and requests messages matching ",(0,r.kt)("inlineCode",{parentName:"li"},"pubtopic1")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"contentTopic1")," from Node D. Node D responds with ",(0,r.kt)("inlineCode",{parentName:"li"},"msg1")," and potentially other messages that match the query.")))}s.isMDXComponent=!0;const c={title:"Network Domains"},p=void 0,l={unversionedId:"overview/concepts/network-domains",id:"overview/concepts/network-domains",title:"Network Domains",description:"Waku is a unified and cohesive entity that offers a rich ecosystem with three distinct network interaction domains. These domains serve specialised purposes and contribute to the robust functionality of Waku, forming its foundation.",source:"@site/docs/overview/concepts/network-domains.md",sourceDirName:"overview/concepts",slug:"/overview/concepts/network-domains",permalink:"/overview/concepts/network-domains",draft:!1,editUrl:"https://github.com/waku-org/docs.waku.org/tree/develop/docs/overview/concepts/network-domains.md",tags:[],version:"current",lastUpdatedAt:1690918744,formattedLastUpdatedAt:"1 Aug 2023",frontMatter:{title:"Network Domains"},sidebar:"main",previous:{title:"Content Topics",permalink:"/overview/concepts/content-topics"},next:{title:"Transports",permalink:"/overview/concepts/transports"}},u={},m=[{value:"Discovery Domain",id:"discovery-domain",level:2},{value:"Gossip Domain",id:"gossip-domain",level:2},{value:"Request/Response Domain",id:"requestresponse-domain",level:2},{value:"Overview of Protocol Interaction",id:"overview-of-protocol-interaction",level:2}],d={toc:m},f="wrapper";function v(e){let{components:t,...o}=e;return(0,r.kt)(f,(0,n.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Waku is a unified and cohesive entity that offers a rich ecosystem with three distinct network interaction domains. These domains serve specialised purposes and contribute to the robust functionality of Waku, forming its foundation."),(0,r.kt)("h2",{id:"discovery-domain"},"Discovery Domain"),(0,r.kt)("p",null,"Peer discovery in Waku facilitates locating other nodes within the network. As a modular protocol, Waku incorporates various discovery mechanisms, such as ",(0,r.kt)("a",{parentName:"p",href:"/overview/concepts/discv5"},"Discv5")," and ",(0,r.kt)("a",{parentName:"p",href:"/overview/concepts/peer-exchange"},"Peer Exchange"),". These mechanisms allow developers to choose the most suitable option(s) for their specific use cases and user environments, including mobile phones, desktop browsers, servers, and more."),(0,r.kt)("h2",{id:"gossip-domain"},"Gossip Domain"),(0,r.kt)("p",null,"GossipSub derives its name from the practice within Pub/Sub networks where peers gossip about the messages they have encountered, thus establishing a message delivery network."),(0,r.kt)("p",null,"Waku employs gossiping through ",(0,r.kt)("a",{parentName:"p",href:"/overview/concepts/protocols#relay"},"Relay")," to distribute messages across the network. Additionally, Waku introduces ",(0,r.kt)("a",{parentName:"p",href:"/overview/concepts/protocols#rln-relay"},"RLN Relay"),", an experimental mechanism that combines privacy preservation and economic spam protection."),(0,r.kt)("h2",{id:"requestresponse-domain"},"Request/Response Domain"),(0,r.kt)("p",null,"Waku provides a set of protocols to optimise its performance in resource-limited environments like low bandwidth or mostly offline scenarios for multiple purposes."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/overview/concepts/protocols#store"},"Store")," enables the retrieval of historical messages."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/overview/concepts/protocols#filter"},"Filter")," efficiently retrieves a subset of messages to conserve bandwidth."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/overview/concepts/protocols#light-push"},"Light Push")," facilitates message publication for nodes with limited bandwidth and short connection windows.")),(0,r.kt)("h2",{id:"overview-of-protocol-interaction"},"Overview of Protocol Interaction"),(0,r.kt)("p",null,"Here is a diagram illustrating the interaction between different protocols within the Waku Network."),(0,r.kt)(s,{mdxType:"ProtocolInteraction"}))}v.isMDXComponent=!0}}]);