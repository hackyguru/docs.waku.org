"use strict";(self.webpackChunkwaku_guide=self.webpackChunkwaku_guide||[]).push([[2983],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},d="mdxType",v={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(r),u=o,m=d["".concat(c,".").concat(u)]||d[u]||v[u]||i;return r?n.createElement(m,a(a({ref:t},p),{},{components:r})):n.createElement(m,a({ref:t},p))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[d]="string"==typeof e?e:o,a[1]=s;for(var l=2;l<i;l++)a[l]=r[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},52361:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>f,frontMatter:()=>c,metadata:()=>p,toc:()=>v});var n=r(87462),o=(r(67294),r(3905));const i={toc:[]},a="wrapper";function s(e){let{components:t,...r}=e;return(0,o.kt)(a,(0,n.Z)({},i,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("mermaid",{value:"sequenceDiagram\n    Alice->>DNS Server: (1) Execute DNS Discovery\n    DNS Server--\x3e>Alice: (2) Bob's connection details (UDP + TCP)\n    activate Alice\n    Alice->>Bob: (3) Execute Discv5 over UDP\n    Bob--\x3e>Alice: (4) ENRs (UDP + TCP): Carol, David, Erin\n    Alice->>Alice: (5) Decode ENRs\n    Alice->>Carol: (6) Execute Discv5 over UDP\n    Carol--\x3e>Alice: (7) ENRs (UDP + TCP): Frank, Gwen, Harry\n    Alice->>Alice: (8) Decode ENRs\n    deactivate Alice\n    Alice->>Alice: (9) Select peers to dial\n    Alice->>David: (10) Libp2p dial (TCP)\n    Alice->>Frank: (10) Libp2p dial (TCP)\n    Alice->>Gwen: (10) Libp2p dial (TCP)"}),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"DNS Discovery protocol is executed."),(0,o.kt)("li",{parentName:"ol"},"Alice retrieves Bob's ENR (Ethereum Node Record) from DNS Server."),(0,o.kt)("li",{parentName:"ol"},"Alice executes the Discv5 protocol with Bob using UDP connection details from ENR."),(0,o.kt)("li",{parentName:"ol"},"Bob returns Carol's, David's and Erin's ENRs to Alice."),(0,o.kt)("li",{parentName:"ol"},"Alice decodes ENRs and extracts the details of Carol, David, and Erin's TCP and UDP connections."),(0,o.kt)("li",{parentName:"ol"},"Alice executes the Discv5 protocol with Carol using UDP connection details from ENR."),(0,o.kt)("li",{parentName:"ol"},"Carol returns Frank's, Gwen's and Harry's ENRs to Alice."),(0,o.kt)("li",{parentName:"ol"},"Alice decodes ENRs and extracts Frank's, Gwen's and Harry's TCP and UDP connection details."),(0,o.kt)("li",{parentName:"ol"},"Alice selects to dial David, Frank and Gwen."),(0,o.kt)("li",{parentName:"ol"},"Alice dials David, Frank and Gwen over libp2p using TCP connection details from ENRs.")))}s.isMDXComponent=!0;const c={title:"Discv5"},l=void 0,p={unversionedId:"overview/concepts/discv5",id:"overview/concepts/discv5",title:"Discv5",description:"Discv5 is a decentralised and efficient peer discovery mechanism for the Waku Network. It uses a Distributed Hash Table (DHT) for storing ENR records, providing resistance to censorship. Discv5 offers a global view of participating nodes, enabling random sampling for load distribution. It uses bootstrap nodes as an entry point to the network, providing randomised sets of nodes for mesh expansion. Have a look at the Discv5 specification to learn more.",source:"@site/docs/overview/concepts/discv5.md",sourceDirName:"overview/concepts",slug:"/overview/concepts/discv5",permalink:"/overview/concepts/discv5",draft:!1,editUrl:"https://github.com/waku-org/docs.waku.org/tree/develop/docs/overview/concepts/discv5.md",tags:[],version:"current",lastUpdatedAt:1690918744,formattedLastUpdatedAt:"1 Aug 2023",frontMatter:{title:"Discv5"},sidebar:"main",previous:{title:"DNS Discovery",permalink:"/overview/concepts/dns-discovery"},next:{title:"Peer Exchange",permalink:"/overview/concepts/peer-exchange"}},d={},v=[{value:"Pros",id:"pros",level:4},{value:"Cons",id:"cons",level:4},{value:"Overview",id:"overview",level:2}],u={toc:v},m="wrapper";function f(e){let{components:t,...r}=e;return(0,o.kt)(m,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Discv5")," is a decentralised and efficient peer discovery mechanism for the Waku Network. It uses a ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Distributed_hash_table"},"Distributed Hash Table (DHT)")," for storing ",(0,o.kt)("inlineCode",{parentName:"p"},"ENR")," records, providing resistance to censorship. ",(0,o.kt)("inlineCode",{parentName:"p"},"Discv5")," offers a global view of participating nodes, enabling random sampling for load distribution. It uses bootstrap nodes as an entry point to the network, providing randomised sets of nodes for mesh expansion. Have a look at the ",(0,o.kt)("a",{parentName:"p",href:"https://rfc.vac.dev/spec/33/"},"Discv5")," specification to learn more."),(0,o.kt)("h4",{id:"pros"},"Pros"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Decentralised with random sampling from a global view."),(0,o.kt)("li",{parentName:"ul"},"Continuously researched and improved.")),(0,o.kt)("h4",{id:"cons"},"Cons"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Requires lots of connections and involves frequent churn."),(0,o.kt)("li",{parentName:"ul"},"Relies on User Datagram Protocol (UDP), which is not supported in web browsers.")),(0,o.kt)("h2",{id:"overview"},"Overview"),(0,o.kt)(s,{mdxType:"Discv5"}))}f.isMDXComponent=!0}}]);