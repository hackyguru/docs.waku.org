"use strict";(self.webpackChunkwaku_guide=self.webpackChunkwaku_guide||[]).push([[683],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>h});var a=n(67294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var c=a.createContext({}),u=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=u(e.components);return a.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),p=u(n),g=s,h=p["".concat(c,".").concat(g)]||p[g]||d[g]||r;return n?a.createElement(h,o(o({ref:t},l),{},{components:n})):a.createElement(h,o({ref:t},l))}));function h(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,o=new Array(r);o[0]=g;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[p]="string"==typeof e?e:s,o[1]=i;for(var u=2;u<r;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},56804:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>u});var a=n(87462),s=(n(67294),n(3905));const r={title:"Send and Receive Messages Using Light Push and Filter"},o=void 0,i={unversionedId:"guides/js-waku/light-send-receive",id:"guides/js-waku/light-send-receive",title:"Send and Receive Messages Using Light Push and Filter",description:"This guide provides detailed steps to create a light node, send messages using the Light Push protocol, and receive messages using the Filter protocol.",source:"@site/docs/guides/js-waku/light-send-receive.md",sourceDirName:"guides/js-waku",slug:"/guides/js-waku/light-send-receive",permalink:"/guides/js-waku/light-send-receive",draft:!1,editUrl:"https://github.com/waku-org/docs.waku.org/tree/develop/docs/guides/js-waku/light-send-receive.md",tags:[],version:"current",lastUpdatedAt:1689462507,formattedLastUpdatedAt:"Jul 15, 2023",frontMatter:{title:"Send and Receive Messages Using Light Push and Filter"},sidebar:"guides",previous:{title:"Quick Start",permalink:"/guides/js-waku/quick-start"},next:{title:"Retrieve Messages Using Store",permalink:"/guides/js-waku/store-retrieve-messages"}},c={},u=[{value:"Create a Light Node",id:"create-a-light-node",level:2},{value:"Create a Message Structure",id:"create-a-message-structure",level:2},{value:"Send Messages Using Light Push",id:"send-messages-using-light-push",level:2},{value:"Receive Messages Using Filter",id:"receive-messages-using-filter",level:2}],l={toc:u},p="wrapper";function d(e){let{components:t,...n}=e;return(0,s.kt)(p,(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"This guide provides detailed steps to create a light node, send messages using the ",(0,s.kt)("a",{parentName:"p",href:"/overview/concepts/protocols#light-push"},"Light Push protocol"),", and receive messages using the ",(0,s.kt)("a",{parentName:"p",href:"/overview/concepts/protocols#filter"},"Filter protocol"),"."),(0,s.kt)("h2",{id:"create-a-light-node"},"Create a Light Node"),(0,s.kt)("p",null,"Set up a Waku node by creating a light node, connecting to network peers with ",(0,s.kt)("inlineCode",{parentName:"p"},"Light Push")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"Filter")," enabled, choosing a ",(0,s.kt)("a",{parentName:"p",href:"/overview/concepts/content-topics"},"content topic"),", and creating an ",(0,s.kt)("inlineCode",{parentName:"p"},"encoder")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"decoder")," for ",(0,s.kt)("a",{parentName:"p",href:"https://rfc.vac.dev/spec/26/"},"message encryption"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'import {\n    createLightNode,\n    waitForRemotePeer,\n    Protocols,\n    createEncoder,\n    createDecoder,\n} from "@waku/sdk";\n\n// Create and start a light node\nconst node = await createLightNode({ defaultBootstrap: true });\nawait node.start();\n\n// Wait for a successful peer connection\nawait waitForRemotePeer(node, [\n    Protocols.LightPush,\n    Protocols.Filter,\n]);\n\n// Choose a content topic\nconst contentTopic = "/light-guide/1/message/proto";\n\n// Create a message encoder and decoder\nconst encoder = createEncoder({ contentTopic });\nconst decoder = createDecoder(contentTopic);\n')),(0,s.kt)("h2",{id:"create-a-message-structure"},"Create a Message Structure"),(0,s.kt)("p",null,"Create your application's message structure using ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/protobufjs/protobuf.js#usage"},"Protobuf's valid message")," fields:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'import protobuf from "protobufjs";\n\n// Create a message structure using Protobuf\nconst ChatMessage = new protobuf.Type("ChatMessage")\n    .add(new protobuf.Field("timestamp", 1, "uint64"))\n    .add(new protobuf.Field("sender", 2, "string"))\n    .add(new protobuf.Field("message", 3, "string"));\n')),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"Check out the ",(0,s.kt)("a",{parentName:"p",href:"/guides/js-waku/quick-start#create-a-message-structure"},"Protobuf installation")," guide for adding the ",(0,s.kt)("inlineCode",{parentName:"p"},"protobufjs")," package to your project.")),(0,s.kt)("h2",{id:"send-messages-using-light-push"},"Send Messages Using Light Push"),(0,s.kt)("p",null,"To send messages over the Waku Network using the ",(0,s.kt)("inlineCode",{parentName:"p"},"Light Push")," protocol, create a new message object and use the ",(0,s.kt)("inlineCode",{parentName:"p"},"lightPush.send()")," function:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'// Create a new message object\nconst protoMessage = ChatMessage.create({\n    timestamp: Date.now(),\n    sender: "Alice",\n    message: "Hello, World!",\n});\n\n// Serialize the message using Protobuf\nconst serializedMessage = ChatMessage.encode(protoMessage).finish();\n\n// Send the message using Light Push\nawait node.lightPush.send(encoder, {\n    payload: serializedMessage,\n});\n')),(0,s.kt)("h2",{id:"receive-messages-using-filter"},"Receive Messages Using Filter"),(0,s.kt)("p",null,"To receive messages using the ",(0,s.kt)("inlineCode",{parentName:"p"},"Filter")," protocol, create a callback function to process the messages and use the ",(0,s.kt)("inlineCode",{parentName:"p"},"filter.subscribe()")," function:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// Create the callback function\nconst callback = (wakuMessage) => {\n    // Check if there is a payload on the message\n    if (!wakuMessage.payload) return;\n    // Render the messageObj as desired in your application\n    const messageObj = ChatMessage.decode(wakuMessage.payload);\n    console.log(messageObj);\n};\n\n// Subscribe to content topics and display new messages\nconst unsubscribe = await node.filter.subscribe([decoder], callback);\n\n// Use the unsubscribe() function to stop receiving messages\n// await unsubscribe();\n")),(0,s.kt)("admonition",{title:"Congratulations!",type:"tip"},(0,s.kt)("p",{parentName:"admonition"},"You have successfully sent and received messages over the Waku Network using the ",(0,s.kt)("inlineCode",{parentName:"p"},"Light Push")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"Filter")," protocols. Check out the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/waku-org/js-waku-examples/tree/master/examples/light-js"},"light-js")," and ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/waku-org/js-waku-examples/tree/master/examples/light-chat"},"light-chat")," examples for working demos.")))}d.isMDXComponent=!0}}]);